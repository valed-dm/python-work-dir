{\rtf1\ansi\ansicpg1251\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 CourierNewPSMT;
\f3\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red193\green152\blue86;\red16\green16\blue16;\red219\green218\blue218;
\red15\green121\blue172;}
{\*\expandedcolortbl;;\cssrgb\c80392\c65882\c41176;\cssrgb\c7843\c7843\c7843;\cssrgb\c88627\c88235\c88235;
\cssrgb\c0\c54902\c72941;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww13460\viewh17000\viewkind0
\deftab720
\pard\pardeftab720\sa160\partightenfactor0

\f0\b\fs60 \cf2 \cb3 \expnd0\expndtw0\kerning0
Key takeaways\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf4 \
\pard\pardeftab720\sa400\partightenfactor0

\fs40 \cf4 \cb3 1. Python supports the following logical operators:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
and
\f1 \cf4  
\f3 \uc0\u8594 
\f1  if both operands are true, the condition is true, e.g., 
\f2 \cf2 (True and True)
\f1 \cf4  is 
\f2 \cf2 True
\f1 \cf4 ,\cb1 \
\ls1\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
or
\f1 \cf4  
\f3 \uc0\u8594 
\f1  if any of the operands are true, the condition is true, e.g., 
\f2 \cf2 (True or False)
\f1 \cf4  is 
\f2 \cf2 True
\f1 \cf4 ,\cb1 \
\ls1\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
not
\f1 \cf4  
\f3 \uc0\u8594 
\f1  returns false if the result is true, and returns true if the result is false, e.g., 
\f2 \cf2 not True
\f1 \cf4  is 
\f2 \cf2 False
\f1 \cf4 .\cb1 \
\pard\pardeftab720\sa400\partightenfactor0
\cf4 \cb3 2. You can use bitwise operators to manipulate single bits of data. The following sample data:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
x = 15
\f1 \cf4 , which is 
\f2 \cf2 0000 1111
\f1 \cf4  in binary,\cb1 \
\ls2\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
y = 16
\f1 \cf4 , which is 
\f2 \cf2 0001 0000
\f1 \cf4  in binary.\cb1 \
\pard\pardeftab720\sa400\partightenfactor0
\cf4 \cb3 will be used to illustrate the meaning of bitwise operators in Python. Analyze the examples below:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
&
\f1 \cf4  does a bitwise and, e.g., 
\f2 \cf2 x & y = 0
\f1 \cf4 , which is 
\f2 \cf2 0000 0000
\f1 \cf4  in binary,\cb1 \
\ls3\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
|
\f1 \cf4  does a bitwise or, e.g., 
\f2 \cf2 x | y = 31
\f1 \cf4 , which is 
\f2 \cf2 0001 1111
\f1 \cf4  in binary,\cb1 \
\ls3\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'98 
\f1 \cf4  does a bitwise not, e.g., 
\f2 \cf2 \'98 x = 240
\f1 \cf4 *, which is 
\f2 \cf2 1111 0000
\f1 \cf4  in binary,\cb1 \
\ls3\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
^
\f1 \cf4  does a bitwise xor, e.g., 
\f2 \cf2 x ^ y = 31
\f1 \cf4 , which is 
\f2 \cf2 0001 1111
\f1 \cf4  in binary,\cb1 \
\ls3\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
>>
\f1 \cf4  does a bitwise right shift, e.g., 
\f2 \cf2 y >> 1 = 8
\f1 \cf4 , which is 
\f2 \cf2 0000 1000
\f1 \cf4  in binary,\cb1 \
\ls3\ilvl0
\f2 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
<<
\f1 \cf4  does a bitwise left shift, e.g., 
\f2 \cf2 y << 3 = 
\f1 \cf4 , which is 
\f2 \cf2 1000 0000
\f1 \cf4  in binary,\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \
\pard\pardeftab720\sa400\partightenfactor0

\fs40 \cf4 \cb3 * 
\f2 \cf2 -16
\f1 \cf4  (decimal from signed 2's complement) -- read more about the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Two%27s_complement"}}{\fldrslt \cf5 Two's complement}} operation.\cb1 \
}