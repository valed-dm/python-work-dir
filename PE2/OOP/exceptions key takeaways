# 1. The else: branch of the try statement is executed when there has been no exception during the execution of the try: block.


# 2. The finally: branch of the try statement is always executed.


# 3. The syntax except Exception_Name as an exception_object: lets you intercept an object carrying information about a pending exception. The object's property named args (a tuple) stores all arguments passed to the object's constructor.


# 4. The exception classes can be extended to enrich them with new capabilities, or to adopt their traits to newly defined exceptions.

# For example:

try:
    assert __name__ == "__main__"
except:
    print("fail", end=' ')
else:
    print("success", end=' ')
finally:
    print("done")
    print()


# The code outputs: success done.

# exercise 1

import math

try:
    print(math.sqrt(9))
except ValueError:
    print("inf")
else:
    print("fine")
    print()

# exercise 2

import math

try:
    print(math.sqrt(-9))
except ValueError:
    print("inf")
else:
    print("fine")
finally:
    print("the end")
    print()

# exercise 3

import math

class NewValueError(ValueError):
    def __init__(self, name, color, state):
        self.data = (name, color, state)

try:
    raise NewValueError("Enemy warning", "Red alert", "High readiness")
except NewValueError as nve:
    for arg in nve.args:
        print(arg, end='! ')


# import math

# try:
#     print(math.pow(2))
# except TypeError:
#     print('A')
# else:
#     print('B')