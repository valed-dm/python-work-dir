# 1. A method is a function embedded inside a class. The first (or only) parameter of each method is usually named self, which is designed to identify the object for which the method is invoked in order to access the object's properties or invoke its methods.


# 2. If a class contains a constructor (a method named __init__) it cannot return any value and cannot be invoked directly.


# 3. All classes (but not objects) contain a property named __name__, which stores the name of the class. Additionally, a property named __module__ stores the name of the module in which the class has been declared, while the property named __bases__ is a tuple containing a class's superclasses.

# For example:

class Sample:
    def __init__(self):
        self.name = Sample.__name__

    def myself(self):
        print("My name is " + self.name + " living in a " + Sample.__module__)


obj = Sample()
obj.myself()


# The code outputs:

# My name is Sample living in a __main__

class SnakeSmall:
    def __init__(self, victims):
        self.victims = victims

    def increment(self, qty=0):
        self.victims += (1 + qty)


obj_snake = SnakeSmall(200)
print(obj_snake.victims)
print(obj_snake.__dict__)
obj_snake.increment()
print(obj_snake.victims)
print(obj_snake.__dict__)
obj_snake.increment(12)
print(obj_snake.victims)

print()


class Snake:
    pass


class Python(Snake):
    pass


print(Python.__name__, 'is a', Snake.__name__)
print(Python.__bases__[0].__name__, 'can be', Python.__name__)
