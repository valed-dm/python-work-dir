File handles
Python assumes that every file is hidden behind an object of an adequate class.

Of course, it's hard not to ask how to interpret the word adequate.

Files can be processed in many different ways - some of them depend on the file's contents, some on the programmer's intentions.

In any case, different files may require different sets of operations, and behave in different ways.

An object of an adequate class is created when you open the file and annihilate it at the time of closing.

Between these two events, you can use the object to specify what operations should be performed on a particular stream. The operations you're allowed to use are imposed by the way in which you've opened the file.




In general, the object comes from one of the classes shown here:


The origin of objects: IOBase, RawIOBase, BufferedIOBase, TextIOBase


Note: you never use constructors to bring these objects to life. The only way you obtain them is to invoke the function named open().

The function analyses the arguments you've provided, and automatically creates the required object.

If you want to get rid of the object, you invoke the method named close().

The invocation will sever the connection to the object, and the file and will remove the object.

For our purposes, we'll concern ourselves only with streams represented by BufferIOBase and TextIOBase objects. You'll understand why soon.