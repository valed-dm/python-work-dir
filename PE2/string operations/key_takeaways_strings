# Key takeaways

# 1. Python strings are immutable sequences and can be indexed, sliced, and iterated like any other sequence, as well as being subject to the in and not in operators. There are two kinds of strings in Python:

# one-line strings, which cannot cross line boundaries – we denote them using either apostrophes ('string') or quotes ("string")
# multi-line strings, which occupy more than one line of source code, delimited by trigraphs:

# '''
# string
# '''


# or

# """
# string
# """


# 2. The length of a string is determined by the len() function. The escape character (\) is not counted. For example:

print(len("\n\n"))


# outputs 2.


# 3. Strings can be concatenated using the + operator, and replicated using the * operator. For example:

asterisk = '*'
plus = "+"
decoration = (asterisk + plus) * 4 + asterisk
print(decoration)


# outputs *+*+*+*+*.


# 4. The pair of functions chr() and ord() can be used to create a character using its codepoint, and to determine a codepoint corresponding to a character. Both of the following expressions are always true:

# chr(ord(character)) == character
# ord(chr(codepoint)) == codepoint


# 5. Some other functions that can be applied to strings are:

# list() – create a list consisting of all the string's characters;
# max() – finds the character with the maximal codepoint;
# min() – finds the character with the minimal codepoint.

# 6. The method named index() finds the index of a given substring inside the string.


# What is the length of the following string assuming there is no whitespaces between the quotes?

"""
""" # length = 1! (/n)

# What is the expected output of the following code?

for ch in "abc":
    print(chr(ord(ch) + 23), end='')